#summary Steps to generate timelapse

= Main principle =

== Check dependancies ==

timelapse-darktable calls external executables.

Be sure that you have these dependencies installed (with this path):



{{{
/usr/bin/darktable-cli
/usr/bin/octave
/usr/bin/convert
/usr/bin/mencoder
}}}

If it is not the case, install following packages (ubuntu):
{{{
sudo apt-get install darktable octave imagemagick mencoder
}}}


== Download timelapse-darktable ==

=== Option1 : Use executable JAR (easiest way) ===

Download last executable JAR in the project trunk with the following svn command

{{{
svn checkout http://timelapse-darktable.googlecode.com/svn/trunk/jar timelapse-darktable-read-only
}}}

NB: if you don't have svn, install subversion package

{{{
sudo apt-get install subversion
}}}


=== Option2 : Use code in eclipse ===

set up eclipse/java timelapse-darktable environment following wiki steps:

http://code.google.com/p/timelapse-darktable/wiki/configureEnvironment


== Generate your timelapse ==

This is the interesting part and why you are looking at this project !

The main principle is to define some key frames, used as reference frames to generate the darktable configuration files (XMP).

To do so, open darktable and pick up at least 2 photos in your timelapse series.

How to define key frames of your future timelapse ?

=== Step1: define key-frames and adjust filters in darktable ===

In darktable modify keyframe pictures, with always the same filters as for all key frames. (use "copy all"/"paste all" options in light table)
You should have the same filters, but the interest is that you can adjust the tuning of these filters differently on each key frame.

=== Step2: copy XMP files of key-frames into a dedicated folder ===

Copy the XMP files of modified key frames in a folder (for instance xmpRef)
These XMP files will be the key frames taken into account by timelapse-darktbale.

=== Step3: execute timelapse-darktable ===

Display help:
{{{
java -jar timelapse-darktable.jar --help
}}}

Typical command to generate your timelapse
 * linear interpolated timelapse (-t linear),
 * with deflickering (-d),
 * generating each JPG frame (-j),
 * and the final movie (-m)
 * from key-frame XMP in xmpRef folder (-x xmpRef),
 * source/raw image in imgSrc folder (imgSrc),
 * and generated outputs in outFolder (-o outFolder):

{{{
java -jar timelapse-darktable.jar -x xmpRef -i imgSrc -o outFolder -t linear -d -j -m
}}}

*Note:*
You should clean up your output folder before executing the script (or take a new name).
if this step is not done, some file will be duplicated and you will get some unexpected results.


In eclipse:
launch by configuring arguments tab in Run > Run configurations...


== Finally ==

go to the output folder and watch your timelapse : video.avi !